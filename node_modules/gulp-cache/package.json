{
  "name": "gulp-cache",
  "version": "0.2.8",
  "description": "A cache proxy plugin for Gulp",
  "scripts": {
    "pretest": "eslint *.js test/*.js",
    "test": "mocha",
    "coverage": "istanbul cover _mocha",
    "coveralls": "${npm_package_scripts_coverage} && istanbul-coveralls"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jgable/gulp-cache"
  },
  "keywords": [
    "gulpplugin"
  ],
  "author": {
    "name": "Jacob Gable",
    "email": "jacob.gable@gmail.com",
    "url": "http://jacobgable.com"
  },
  "contributors": [
    {
      "name": "Jacob Gable",
      "email": "jacob.gable@gmail.com",
      "url": "https://github.com/jgable"
    },
    {
      "name": "Tyler Akins",
      "email": "fidian@rumkin.com",
      "url": "https://github.com/fidian"
    },
    {
      "name": "Shinnosuke Watanabe",
      "email": "snnskwtnb@gmail.com",
      "url": "https://github.com/shinnn"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.9.12",
    "cache-swap": "^0.2.0",
    "gulp-util": "^3.0.0",
    "object-assign": "^2.0.0",
    "object.omit": "^0.2.1",
    "through2": "^0.6.3",
    "vinyl": "^0.4.6"
  },
  "devDependencies": {
    "eslint": "^0.14.1",
    "istanbul": "^0.3.6",
    "istanbul-coveralls": "^1.0.1",
    "lodash-node": "^3.3.0",
    "mocha": "^2.1.0",
    "should": "^5.0.1",
    "sinon": "^1.12.2"
  },
  "readme": "# gulp-cache  [![status](https://travis-ci.org/jgable/gulp-cache.svg?branch=master)](https://travis-ci.org/jgable/gulp-cache) [![Coverage Status](https://img.shields.io/coveralls/jgable/gulp-cache.svg)](https://coveralls.io/r/jgable/gulp-cache) [![Dependency Status](https://david-dm.org/jgable/gulp-cache.svg)](https://david-dm.org/jgable/gulp-cache)\n\nA temp file based caching proxy task for [gulp](http://gulpjs.com/).\n\n## Usage\n\n```javascript\nvar fs = require('fs');\n\nvar gulp = require('gulp');\nvar jshint = require('gulp-jshint');\nvar cache = require('gulp-cache');\n\ngulp.task('lint', function() {\n  gulp.src('./lib/*.js')\n    .pipe(cache(jshint('.jshintrc'), {\n      key: makeHashKey,\n      // What on the result indicates it was successful\n      success: function (jshintedFile) {\n        return jshintedFile.jshint.success;\n      },\n      // What to store as the result of the successful action\n      value: function (jshintedFile) {\n        // Will be extended onto the file object on a cache hit next time task is ran\n        return {\n          jshint: jshintedFile.jshint\n        };\n      }\n    }))\n    .pipe(jshint.reporter('default'));\n});\n\nvar jsHintVersion = '2.4.1',\n  jshintOptions = fs.readFileSync('.jshintrc');\nfunction makeHashKey(file) {\n  // Key off the file contents, jshint version and options\n  return [file.contents.toString('utf8'), jshintVersion, jshintOptions].join('');\n}\n```\n\n## Clearing the cache\n\nIf you find yourself needing to clear the cache, there is a handy dandy `cache.clearAll()` method:\n\n```js\nvar cache = require('gulp-cache');\n\ngulp.task('clear', function (done) {\n  return cache.clearAll(done);\n});\n```\n\nYou can then run it with `gulp clear`.\n\n## Options\n\n#### `fileCache`\n\n> [Optional] Where to store the cache objects\n\n- Defaults to `new Cache({ cacheDirName: 'gulp-cache' })`\n\n- Create your own with `new cache.Cache({ cacheDirName: 'custom-cache' })`\n\n#### `name`\n\n> [Optional] The name of the bucket which stores the cached objects\n\n- Defaults to `default`\n\n#### `key`\n\n> [Optional] What to use to determine the uniqueness of an input file for this task.\n\n- Can return a string or a promise that resolves to a string.  Optionally, can accept a callback parameter for idiomatic node style asynchronous operations.  \n\n- The result of this method is converted to a unique MD5 hash automatically; no need to do this yourself.\n\n- Defaults to `file.contents` if a Buffer, or `undefined` if a Stream.\n\n#### `success`\n\n> [Optional] How to determine if the resulting file was successful.\n\n- Must return a truthy value that is used to determine whether to cache the result of the task.\n\n- Defaults to true, so any task results will be cached.\n\n#### `value`\n\n> [Optional] What to store as the cached result of the task.\n\n- Can be a function that returns an Object or a promise that resolves to an Object.  Optionally, can accept a callback for idiomatic node style asynchronous operations.\n\n- Can also be set to a string that will be picked (using `_.pick`) of the task result file.\n\n- The result of this method is run through `JSON.stringify` and stored in a temp file for later retrieval.\n\n- Defaults to `'contents'` which will grab the resulting file.contents and store them as a string.\n\n## License\n\n[The MIT License (MIT)](./LICENSE)\n\nCopyright (c) 2014 [Jacob Gable](http://jacobgable.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jgable/gulp-cache/issues"
  },
  "homepage": "https://github.com/jgable/gulp-cache",
  "_id": "gulp-cache@0.2.8",
  "_shasum": "3e3eeb90f39f8b07b28c50bf8be6ea5abc6bbe50",
  "_from": "gulp-cache@",
  "_resolved": "https://registry.npmjs.org/gulp-cache/-/gulp-cache-0.2.8.tgz"
}
